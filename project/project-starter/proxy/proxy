#!/usr/bin/env python2.7
import sys
import socket

# Input arguments
log_path = sys.argv[1]
alpha = float(sys.argv[2])
listen_port = int(sys.argv[3])
proxy_ip = sys.argv[4] # Fake IP
server_ip = sys.argv[5]

# Proxy to handle client (proxy acts as server)
c = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
c.bind(('', listen_port))
c.listen(1)

# Proxy to direct to server (proxy acts as client)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((proxy_ip, 4999))
s.connect((server_ip, 8080))
server_connected = True

# Logic that handles sending the client message to the server
# Returns the response from the server
def send_to_server(client_message):
    get_request = client_message + "\nHost: " + server_ip + "\n\n"
    # print "Client message", client_message
    s.sendall(get_request.encode())

    message = ""
    while True:
        data = s.recv(16).decode()
        print "Receiving data from server"
        print data

        if data:
            if '\n' in data:
                message += data.split('\n')[0]
                response = message + '\n' # Add the newline character for formatting
                return response
            else:
                message += data
        else:
            print "Server terminated the connection"
            return None

# Logic that handles accepting a client connection
# Returns whether or not the proxy should be kept alive or not
def handle_from_client(client_connection):
    message = ""
    while True:
        data = client_connection.recv(16).decode()
        print "Received data from client"
        print data

        if data:
            if '\n' in data:
                message += data.split('\n')[0]
                server_message = message + '\n' # Add the newline character for formatting

                try:
                    response = send_to_server(server_message)
                    if response == None:
                        return False # Server terminated, thus end proxy
                    else:
                        client_connection.sendall(response.encode())
                        message = ""
                except:
                    return False # Server timed'out or errorer, thus end proxy
            else:
                message += data
        else:
            print "Client terminated the connection"
            return True

while server_connected:
    try:
        client_connection, client_address = c.accept()
        print "Received a connection"

        try:
            keep_alive = handle_from_client(client_connection)
            if (not keep_alive):
                client_connection.close()
                break
        finally:
            client_connection.close()
    except KeyboardInterrupt:
        s.close()
        c.close()

s.close()
c.close()
